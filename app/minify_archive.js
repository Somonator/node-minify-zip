const path = require('path')
const uploadsDir = path.join(__dirname, '../uploads/')

const formidable = require('formidable')

const fs = require('fs')

const extractZip = require('extract-zip')
const zipFolder = require('zip-folder')

const CleanCSS = require('clean-css')
const UglifyJS = require("uglify-js")
const HtmlMinifier = require('html-minifier')


let css_options = {
    "advanced": true,
    "aggressiveMerging": true,
    "compatibility": "*",
    "inliner": {},
    "keepBreaks": false,
    "keepSpecialComments": "*",
    "mediaMerging": true,
    "processImport": true,
    "processImportFrom": ["all"],
    "rebase": true,
    "restructuring": true,
    "root": "${workspaceRoot}",
    "roundingPrecision": 2,
    "semanticMerging": false,
    "shorthandCompacting": true
},
js_options = {
    "mangle": true,
    "compress": {
        "sequences": true,
        "properties": true,
        "dead_code": true,
        "drop_debugger": true,
        "unsafe": false,
        "unsafe_comps": false,
        "conditionals": true,
        "comparisons": true,
        "evaluate": true,
        "booleans": true,
        "loops": true,
        "unused": true,
        "hoist_funs": true,
        "keep_fargs": true,
        "keep_fnames": false,
        "hoist_vars": false,
        "if_return": true,
        "join_vars": true,
        "collapse_vars": false,
        "reduce_vars": false,
        "side_effects": true,
        "pure_getters": false,
        "pure_funcs": null,
        "negate_iife": false,
        "drop_console": false,
        "passes": 1,
        "global_defs": {}
    },
    "output": {
        "ascii_only": false,
        "inline_script": false,
        "max_line_len": 32000,
        "braces": false,
        "semicolons": true,
        "comments": false,
        "shebang": true,
        "preamble": null,
        "quote_style": "best"
    }
},
html_options = {
    "caseSensitive": false,
    "collapseBooleanAttributes": true,
    "collapseWhitespace": true,
    "conservativeCollapse": false,
    "customAttrAssign": [],
    "customAttrCollapse": /(?:)/,
    "customAttrSurround": [],
    "customEventAttributes": [/^on[a-z]{3,}$/],
    "decodeEntities": false,
    "html5": true,
    "ignoreCustomComments": [/^!/],
    "ignoreCustomFragments": [/<%[\s\S]*?%>/, /<\?[\s\S]*?\?>/],
    "includeAutoGeneratedTags": true,
    "keepClosingSlash": false,
    "maxLineLength": false,
    "minifyCSS": true,
    "minifyJS": true,
    "minifyURLs": false,
    "preserveLineBreaks": false,
    "preventAttributesEscaping": false,
    "processConditionalComments": false,
    "processScripts": [],
    "quoteCharacter": "\"",
    "removeAttributeQuotes": false,
    "removeComments": false,
    "removeEmptyAttributes": false,
    "removeEmptyElements": false,
    "removeOptionalTags": false,
    "removeRedundantAttributes": false,
    "removeScriptTypeAttributes": false,
    "removeStyleLinkTypeAttributes": false,
    "sortAttributes": false,
    "sortClassName": false,
    "useShortDoctype": false
}



function archive_upload(req, res) {
	let form = new formidable.IncomingForm()

	form.parse(req, function (err, fields, files) {
		if (files.project_archive) {
            let file = files.project_archive.name,
                file_ext = path.extname(file),
                file_name = path.basename(file, file_ext),
			    old_path = files.project_archive.path,
                new_path = path.join(uploadsDir, file)           

			fs.rename(old_path, new_path, function(err) {
                if (err) throw err

                console.log('upload');

                let extract_path = path.join(uploadsDir, file_name)

                archive_extract(file, extract_path).then(function() {
                    console.log('unzip');

					mification_folder(extract_path).then(function() {
                        console.log('minification');

                        let zip_path = extract_path + '.min.zip'
                        
                        zipFolder(extract_path, zip_path, function(err) {
                            if (err) throw err

                            console.log('to zip');
                    
                            remove_by_path(extract_path)
                            remove_by_path(new_path)

                            console.log('done');

                            setTimeout(function() {
                                remove_by_path(zip_path)

                                console.log('remove');
                            }, 10 * 60 * 1000);
                        })     
                    })
                })
			})

			res.redirect('/?result=success&file=' + file_name + '.min.zip')
		} else {
			res.redirect('/?result=error')
		}

		res.end()
	})
}

async function archive_extract(archive_path, extract_path) {
	await extractZip(archive_path, { dir: extract_path }, function(err) {
		if (err) throw err
    })
}

async function mification_folder(minify_path) {
    let files = fs.readdirSync(minify_path),
        promises = []

    files.forEach(function(file, i) {
        promises[i] = new Promise(async function(resolve, reject) {
            let file_path = minify_path + '/' + file

            if (fs.lstatSync(file_path).isDirectory()) {
                mification_folder(file_path)
            } else {
                await minify_file(file_path)
            }

            resolve()
        })
    })

    return await Promise.all(promises)
}

function get_minified_code(code, ext) {
    let minify_fns = {
        css: function(code) {
            let output = new CleanCSS(css_options).minify(code)

            if (output.errors.length) throw output.errors
            if (output.warnings.length) throw output.warnings

            return output.styles
        },
        js: function(code) {
            let output = UglifyJS.minify(code, js_options)

            if (output.error) throw output.error

            return output.code
        },
        html: function(code) {
            return HtmlMinifier.minify(code, html_options)
        }
    }

    return minify_fns[ext] !== undefined ? minify_fns[ext](code) : code
}

async function minify_file(file_path) {
	let file_ext = path.extname(file_path),
        file_name = path.basename(file_path, file_ext)
    
    return new Promise(function(resolve, reject) {
        if (file_name.match(/.min/ui)) {
            resolve()
            return
        }
        
        if (!(file_ext === '.css' || file_ext === '.js' || file_ext === '.html')) {
            resolve()
            return
        }

        fs.readFile(file_path, 'utf8', function(err, data){
            if (err) throw err

            let result = get_minified_code(data, file_ext.substring(1))

            fs.writeFile(file_path, result, function(err) {
                if (err) throw err

                resolve()
            })
        })
    })
}

function remove_by_path(path) {
    if (fs.lstatSync(path).isDirectory()) {
        fs.rmdirSync(path, { recursive: true })
    } else {
	    fs.unlinkSync(path)        
    }
}


module.exports = {
	archive_upload
}